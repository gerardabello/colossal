'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _interopRequireDefault = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _Note = require('../note');

var _Note2 = _interopRequireDefault(_Note);

var _addAdditionalNotes = require('./add-additional-notes');

var _addAdditionalNotes2 = _interopRequireDefault(_addAdditionalNotes);

var Chord = (function () {
  function Chord() {
    var signature = arguments[0] === undefined ? 'A4' : arguments[0];
    var mode = arguments[1] === undefined ? undefined : arguments[1];

    _classCallCheck(this, Chord);

    this.root = new _Note2['default'](signature);
    this.mode = mode;
    this.notes = [this.root];

    if (mode) {
      _addAdditionalNotes2['default'].call(this);
    }
  }

  _createClass(Chord, [{
    key: 'signatures',
    get: function () {
      return this.notes.map(function (n) {
        return n.signature;
      });
    }
  }, {
    key: 'pianoKeys',
    get: function () {
      return this.notes.map(function (n) {
        return n.pianoKey;
      });
    }
  }, {
    key: 'frequencies',
    get: function () {
      return this.notes.map(function (n) {
        return n.frequency;
      });
    }
  }, {
    key: 'addInterval',
    value: function addInterval(i) {
      this.notes.push(this.root.interval(i));
      return this;
    }
  }]);

  return Chord;
})();

exports['default'] = Chord;
module.exports = exports['default'];