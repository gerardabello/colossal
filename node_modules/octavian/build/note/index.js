'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _interopRequireDefault = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _parseNote = require('./parse-note');

var _parseNote2 = _interopRequireDefault(_parseNote);

var _getAlternateName = require('./get-alternate-name');

var _getAlternateName2 = _interopRequireDefault(_getAlternateName);

var _getNoteFromPianoKey = require('./get-note-from-piano-key');

var _getNoteFromPianoKey2 = _interopRequireDefault(_getNoteFromPianoKey);

var _pianoKeys$frequencies = require('./piano-keys');

var _validateNote = require('./validate-note');

var _validateNote2 = _interopRequireDefault(_validateNote);

var _intervals = require('./intervals');

var _intervals2 = _interopRequireDefault(_intervals);

var _Chord = require('../chord');

var _Chord2 = _interopRequireDefault(_Chord);

var Note = (function () {
  function Note(note) {
    var _this = this;

    _classCallCheck(this, Note);

    var parsedNote = _parseNote2['default'](note);
    Object.keys(parsedNote).forEach(function (key) {
      return _this[key] = parsedNote[key];
    });
    _validateNote2['default'](this.signature);
  }

  _createClass(Note, [{
    key: 'signature',
    get: function () {
      return '' + this.letter + '' + (this.modifier || '') + '' + this.octave;
    },
    set: function (note) {
      this.constructor(note);
      return this.signature;
    }
  }, {
    key: 'pianoKey',
    get: function () {
      return _pianoKeys$frequencies.pianoKeys[this.signature];
    }
  }, {
    key: 'frequency',
    get: function () {
      return _pianoKeys$frequencies.frequencies[this.pianoKey];
    }
  }, {
    key: 'alternateName',
    get: function () {
      return _getAlternateName2['default'](this.signature);
    }
  }, {
    key: 'interval',
    value: function interval(i) {
      if (typeof i === 'number') {
        return Note.fromPianoKey(this.pianoKey + i);
      }

      var validIntervals = Object.keys(_intervals2['default']);
      if (validIntervals.indexOf(i) === -1) {
        throw new Error('' + i + ' is an invalid interval,\n                       try: ' + validIntervals.join(', '));
      }

      return this[i]();
    }
  }, {
    key: 'toChord',
    value: function toChord(mode) {
      return new _Chord2['default'](this.signature, mode);
    }
  }], [{
    key: 'fromPianoKey',
    value: function fromPianoKey(pianoKey) {
      var note = _getNoteFromPianoKey2['default'](pianoKey);
      return new this(note);
    }
  }]);

  return Note;
})();

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  var _loop = function () {
    var interval = _step.value;

    Note.prototype[interval] = function () {
      return this.interval(_intervals2['default'][interval]);
    };
  };

  for (var _iterator = Object.keys(_intervals2['default'])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    _loop();
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

exports['default'] = Note;
module.exports = exports['default'];